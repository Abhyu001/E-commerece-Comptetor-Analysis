import json
from datetime import datetime
import pandas as pd
import plotly.express as px
import requests
import streamlit as st
from openai import AzureOpenAI
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from statsmodels.tsa.arima.model import ARIMA
from transformers import pipeline

# Constants
API_KEY = "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"
SLACK_WEBHOOK = "https://hooks.slack.com/services/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"

# Functions
def truncate_text(text, max_length=512):
    return text[:max_length]

def load_competitor_data():
    data = pd.read_csv("amazon_products.csv")
    return data

def load_reviews_data():
    reviews = pd.read_csv("review_data.csv")
    return reviews

def analyze_sentiment(reviews):
    sentiment_pipeline = pipeline(
        "sentiment-analysis",
        model="distilbert/distilbert-base-uncased-finetuned-sst-2-english",
        revision="714eb0f"
    )
    return sentiment_pipeline([str(review) for review in reviews])

def forecast_discounts_arima(data, future_days=5):
    data = data.sort_index()
    data["Discount"] = pd.to_numeric(data["Discount"], errors="coerce")
    data = data.dropna(subset=["Discount"])

    discount_series = data["Discount"]
    if not isinstance(data.index, pd.DatetimeIndex):
        data.index = pd.to_datetime(data.index, errors='coerce')

    model = ARIMA(discount_series, order=(5, 1, 0))
    model_fit = model.fit()

    forecast = model_fit.forecast(steps=future_days)
    future_dates = pd.date_range(
        start=discount_series.index[-1] + pd.Timedelta(days=1), periods=future_days
    )

    forecast_df = pd.DataFrame({"Date": future_dates, "Predicted_Discount": forecast})
    forecast_df.set_index("Date", inplace=True)

    return forecast_df

def generate_strategy_recommendation(product_name, competitor_data, sentiment):
    date = datetime.now()
    prompt = f"""
    You are a highly skilled business strategist specializing in e-commerce. Based on the following details, suggest actionable strategies to optimize pricing, promotions, and customer satisfaction for the selected product:

    1. *Product Name*: {product_name}
    2. *Competitor Data*: {competitor_data}
    3. *Sentiment Analysis*: {sentiment}
    4. *Today's Date*: {str(date)}

    Provide recommendations for:
    - Pricing Strategy
    - Promotional Campaign Ideas
    - Customer Satisfaction Recommendations
    """

    data = {
        "messages": [{"role": "user", "content": prompt}],
        "model": "llama3-8b-8192",
        "temperature": 0,
    }

    headers = {"Content-Type": "application/json", "Authorization": f"Bearer {API_KEY}"}

    res = requests.post(
        "https://api.groq.com/openai/v1/chat/completions",
        data=json.dumps(data),
        headers=headers,
    )
    res = res.json()
    response = res["choices"][0]["message"]["content"]
    return response

def send_to_slack(data):
    payload = {"text": data}
    requests.post(
        SLACK_WEBHOOK,
        data=json.dumps(payload),
        headers={"Content-Type": "application/json"},
    )

# Streamlit UI Setup
st.set_page_config(page_title="E-Commerce Competitor Strategy Dashboard", layout="wide")

# Sidebar
st.sidebar.title("Product Selection")
products = [
    "boAt Rockerz 480",
    "HP Victus Gaming Laptop",
    "HAVAI Thunder 85 Cooler",
    "Samsung Galaxy M05",
    "iQOO Z9x 5G",
]
selected_product = st.sidebar.selectbox("Choose a product to analyze:", products)

# Main Dashboard Title
st.title("E-Commerce Competitor Strategy Dashboard")
st.markdown("---")

# Load Data
competitor_data = load_competitor_data()
reviews_data = load_reviews_data()

product_data = competitor_data[competitor_data["Title"] == selected_product]
product_reviews = reviews_data[reviews_data["Title"] == selected_product]

# Competitor Data Section
st.subheader(f"Competitor Analysis for {selected_product}")
if not product_data.empty:
    st.markdown("### Competitor Data")
    st.dataframe(product_data.tail(5), use_container_width=True)
else:
    st.write("No competitor data available.")

# Sentiment Analysis Section
if not product_reviews.empty:
    product_reviews["Reviews"] = product_reviews["Reviews"].apply(lambda x: truncate_text(x, 512))
    reviews = product_reviews["Reviews"].tolist()
    sentiments = analyze_sentiment(reviews)

    st.markdown("### Customer Sentiment Analysis")
    sentiment_df = pd.DataFrame(sentiments)
    fig = px.bar(sentiment_df, x="label", title="Sentiment Analysis Results", color="label")
    st.plotly_chart(fig, use_container_width=True)
else:
    st.write("No reviews available for this product.")

# Forecasting Section
st.markdown("### Competitor Discount Forecast")
if not product_data.empty:
    product_data["Date"] = pd.to_datetime(product_data["Date"], errors="coerce")
    product_data = product_data.dropna(subset=["Date"]).set_index("Date").sort_index()
    product_data_with_predictions = forecast_discounts_arima(product_data)

    st.dataframe(product_data_with_predictions.tail(10), use_container_width=True)
else:
    st.write("No data available for forecasting.")

# Recommendations Section
st.markdown("### Strategic Recommendations")
recommendations = generate_strategy_recommendation(
    selected_product,
    product_data_with_predictions if not product_data.empty else "No data",
    sentiments if not product_reviews.empty else "No reviews available",
)
st.write(recommendations)

# Send to Slack
send_to_slack(recommendations)
